#!/usr/bin/perl
use strict;
use warnings;
use XML::Simple;
use LWP::UserAgent;
use Term::ANSIColor qw(colored);
use Digest::SHA qw(sha256_hex);
use Data::Dumper;
use POSIX qw(strftime);

# near future feature, coming soon
my $conf_hash;

my $CONFIG = $ENV{'HOME'} . "/.vcxconf.xml";
if (-e $CONFIG) {
    $conf_hash = XMLin($CONFIG);
}

my $sleep_int = 2;

# interval checking
if (defined $ARGV[0] && $ARGV[0] =~ m/^\d{1,3}$/) {
    $sleep_int = $ARGV[0];
}


my $ua = LWP::UserAgent->new;

# whatever .. vircurex just doesn't like libwww-perl as user agent signature
$ua->agent("Mozilla/8.0");  
$ua->cookie_jar({file => "$ENV{'HOME'}/.cookiejar_vcx.txt"});   

# which coins do we want to watch?
my @watchlist = qw(DOGE FTC FRC I0C IXC NMC NVC LTC DVC DGC ANC WDC TRC XPM QRK PPC);

my ($balance, $data, $response);

# function for getting balance information
sub get_balance {
    my $timestamp = strftime "%Y-%m-%dT%H:%M:%S", gmtime;
    my $txid = sha256_hex($timestamp);
    my $user = $conf_hash->{'username'};
    my $sec_getbal = $conf_hash->{'get_balance_word'};

    my $token = sha256_hex("$sec_getbal;$user;$timestamp;$txid;get_balances");
    $balance = 0;
    $response = $ua->get("https://api.vircurex.com/api/get_balances.xml?account=$user&id=$txid&token=$token&timestamp=$timestamp");
    if ($response->is_success) {
        $balance = eval { XMLin($response->decoded_content) };
        $balance = 0 if $@;
    }
    undef $response;
    undef $txid;
    undef $user;
    undef $sec_getbal;
    undef $token;
    system('clear');
    return $balance;
}


# function that gets th API xml file and then parses it into a wonderful hash
sub get_data {
    $data = 0;
    $response = $ua->get("https://api.vircurex.com/api/get_info_for_currency.xml");
    if ($response->is_success) {
        $data = eval { XMLin($response->decoded_content) };
        $data = 0 if $@;
    }
    undef $response;
    return $data;
}

# function for positive check
sub is_positive {
    return $_[0] > 0.0 ? 1 : 0;
}

my ( $nowtime, $storcounter, $nowdate, $block, $runcounter, @storage, $cur, $low, $high, 
     $avg_50, $avg_500, $avg_250, $sum_500, $sum_250, $sum_50, $v, $bal, $bal_avail );

$storcounter = -1;
$runcounter = 0;

while (1) {
    # date and time
    $nowdate = sprintf("%02d-%02d-%02d", (localtime)[3], (localtime)[4] + 1, (localtime)[5] + 1900);
    $nowtime = sprintf("%02d:%02d:%02d", (localtime)[2], (localtime)[1], (localtime)[0]);
    $block = get_data();
    $bal = get_balance();
    $bal_avail = 0;

    if ($bal != 0) {
        $bal_avail = 1;
    }

    if ($block != 0) {
        push @storage, $block;
        $storcounter++;
        $runcounter++;
    }
    if (scalar @storage > 500) { # 200 x 5 secs for averages and tendencies
        undef $storage[0];
        shift @storage;
        $storcounter--;
    }
    print "$nowdate - $nowtime - refresh approx. every $sleep_int seconds (+ some seconds [network/load]) [ ", sprintf("%09d", $runcounter), " polls ]";
    print "\nHB - highest bid / LA - lowest ask / LT - last executed trade / VOL_BTC - Trading Volume in BTC\n";
    print "TENDENCY is a percentual value and will appear after some time, please be patient :)\n";
    print "Tendency calculates like this: (last_trade / average_of_x_recorded_trades * 100) - 100\n\n";
    printf("%8s  :  %10s  :  %10s  :  %10s  :  %10s  :  %10s  :  %10s  :  %10s\n\n\n", qw(CUR HB LA LT VOL_BTC TEND_50 TEND_250 TEND_500));
    if ($storcounter >= 0 ) {
        for $cur (sort keys %{$storage[$storcounter]}) {
            if (grep { /$cur/ } @watchlist) {
                printf "%8s  :  %.8f  :  %.8f  :  %.8f  :  %010.5f  :  ", 
                $cur, $storage[scalar @storage - 1]->{$cur}{'BTC'}{'highest-bid'}{'content'}, $storage[scalar @storage - 1]->{$cur}{'BTC'}{'lowest-ask'}{'content'},
                $storage[scalar @storage - 1]->{$cur}{'BTC'}{'last-trade'}{'content'}, $storage[scalar @storage - 1]->{'BTC'}{$cur}{'volume'}{'content'};
                if (scalar @storage >= 50) {
                    ($low, $high) = (scalar @storage - 50, scalar @storage - 1);
                    $sum_50 = 0.0;
                    for ($low .. $high) {
                        $sum_50 += $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'} if $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'};
                    }
                    $avg_50 = $sum_50 / 50;
                    $v = sprintf("%+010.5f", ($storage[$high]->{$cur}{'BTC'}{'last-trade'}{'content'} / $avg_50 * 100) - 100);
                    if (is_positive($v)) {
                        printf ("%9s  :  ",  colored($v, 'bright_green on_black'));
                    }
                    elsif ($v == 0.0) {
                        printf ("%9s  :  ",  colored($v, 'bright_white on_black'));
                    }
                    else {
                        printf ("%9s  :  ",  colored($v, 'bright_red on_black'));
                    }
                    if (scalar @storage >= 250) {
                        ($low, $high) = (scalar @storage - 250, scalar @storage - 1);
                        $sum_250 = 0.0;
                        for ($low .. $high) {
                            $sum_250 += $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'} if $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'};
                        }
                        $avg_250 = $sum_250 / 250;
                        $v = sprintf("%+010.5f", ($storage[$high]->{$cur}{'BTC'}{'last-trade'}{'content'} / $avg_250 * 100) - 100);
                        if (is_positive($v)) {
                            printf ("%9s  :  ",  colored($v, 'bright_green on_black'));
                        }
                        elsif ($v == 0.0) {
                            printf ("%9s  :  ",  colored($v, 'bright_white on_black'));
                        }
                        else {
                            printf ("%9s  :  ",  colored($v, 'bright_red on_black'));
                        }
                        if (scalar @storage >= 500) {
                            ($low, $high) = (scalar @storage - 500, scalar @storage - 1);
                            $sum_500 = 0.0;
                            for ($low .. $high) {
                                $sum_500 += $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'} if $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'};
                            }
                            $avg_500 = $sum_500 / 500;
                            $v = sprintf("%+010.5f", ($storage[$high]->{$cur}{'BTC'}{'last-trade'}{'content'} / $avg_500 * 100) - 100);
                            if (is_positive($v)) {
                                printf ("%9s",  colored($v, 'bright_green on_black'));
                            }
                            elsif ($v == 0.0) {
                                printf ("%9s",  colored($v, 'bright_white on_black'));
                            }
                            else {
                                printf ("%9s",  colored($v, 'bright_red on_black'));
                            }
                        }

                    }
                    print "  % \n";
                }
                else {
                    print "\n";
                }

            }
        }
        print "\n";
    }
    print "\n\n\tBALANCES\n\n";
    printf "%5s: %20s %20s\n\n", "CUR", "TOTAL BALANCE", "AVAIL BALANCE";
    if ($bal_avail) {
        for (sort keys %{$bal->{'balances'}}) {
            printf "%5s: %20.10f %20.10f\n", $_ ,$bal->{'balances'}{$_}{'balance'}{'content'}, $bal->{'balances'}{$_}{'availablebalance'}{'content'};
        }
    }
    sleep $sleep_int;
}
