#!/usr/bin/perl
use strict;
use warnings;
use XML::Simple;
use LWP::UserAgent;

my $ua = LWP::UserAgent->new;

# whatever .. vircurex just doesn't like libwww-perl as user agent signature
$ua->agent("Mozilla/8.0");  

# stupid page, stupid cookies, but needed unfortunately
$ua->cookie_jar({file => "$ENV{'HOME'}/.cookiejar_vcx.txt"});   


# which coins do we want to watch?
my @watchlist = qw(DOGE FTC LTC DVC DGC ANC WDC TRC XPM QRK PPC);

# function that gets th API xml file and then parses it into a wonderful hash
sub get_data {
    my $data = 0;
    my $response = $ua->get("https://vircurex.com/api/get_info_for_currency.xml");
    if ($response->is_success) {
        $data = XMLin($response->decoded_content);
    }
    else {
        print "Couldn't fetch API, ... :/\n";
    }
    system('clear');
    return $data;
}


my @storage;
my $storcounter = 0;



while (1) {
    # date and time
    my $nowdate = sprintf("%02d.%02d.%02d", (localtime)[3], (localtime)[4] + 1, (localtime)[5] + 1900);
    my $nowtime = sprintf("%02d:%02d:%02d", (localtime)[2], (localtime)[1], (localtime)[0]);
    my $block = get_data();

    if ($block) {
        push @storage, $block;
        $storcounter++;
    }
    push @storage, $block if $block;

    if (scalar @storage > 200) { # 200 x 5 secs for averages and tendencies
        shift @storage;
        $storcounter--;
    }
    print "$nowdate - $nowtime - refresh approx. every 5 seconds (+/- some seconds for network latency and server load)";
    print "\nHB - highest bid / LA - lowest ask / LT - last executed trade / VOL_BTC - Trading Volume in BTC\n";
    print "TENDENCY is a percentual value and will appear after some time (4.5m), please be patient :)\n";
    print "Tendency calculates like this: (last_trade / average_of_20_or_50_last_recorded_trades * 100) - 100\n\n";
    printf("%8s  :  %10s  :  %10s  :  %10s  :  %10s  :  %10s  :  %10s  :  %10s\n", qw(CUR HB LA LT VOL_BTC TEND_20 TEND_50 TEND_200));
    for my $cur (sort keys %{$storage[$storcounter]}) {
        if (grep { /$cur/ } @watchlist) {
            printf "%8s  :  %.8f  :  %.8f  :  %.8f  :  %010.5f  :  ", $cur, $storage[$storcounter]->{$cur}{'BTC'}{'highest-bid'}{'content'}, $storage[$storcounter]->{$cur}{'BTC'}{'lowest-ask'}{'content'},
                $storage[$storcounter]->{$cur}{'BTC'}{'last-trade'}{'content'}, $storage[$storcounter]->{'BTC'}{$cur}{'volume'}{'content'};
            if (scalar @storage >= 20) {
                my ($low, $high) = (scalar @storage - 20, scalar @storage - 1);
                my $sum_20 = 0.0;
                for ($low .. $high) {
                     $sum_20 += $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'} if $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'};
                }
                my $avg_20 = $sum_20 / 20;
                printf ("%+10.5f  :  ",  ($storage[$high]->{$cur}{'BTC'}{'last-trade'}{'content'} / $avg_20 * 100) - 100);
                if (scalar @storage >= 50) {
                    my ($low, $high) = (scalar @storage - 50, scalar @storage - 1);
                    my $sum_50 = 0.0;
                    for ($low .. $high) {
                        $sum_50 += $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'} if $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'};
                    }
                    my $avg_50 = $sum_50 / 50;
                    printf ("%+10.5f  :  ",  ($storage[$high]->{$cur}{'BTC'}{'last-trade'}{'content'} / $avg_50 * 100) - 100);
                    if (scalar @storage >= 200) {
                        my ($low, $high) = (scalar @storage - 200, scalar @storage - 1);
                        my $sum_200 = 0.0;
                        for ($low .. $high) {
                            $sum_200 += $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'} if $storage[$_]->{$cur}{'BTC'}{'last-trade'}{'content'};
                        }
                        my $avg_200 = $sum_200 / 200;
                        printf ("%+10.5f",  ($storage[$high]->{$cur}{'BTC'}{'last-trade'}{'content'} / $avg_200 * 100) - 100);
                    }

                }
                print "  % \n";
            }
            else {
                print "\n";
            }

        }
    }
    print "\n";
    sleep 5;
}
